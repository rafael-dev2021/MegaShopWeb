// <auto-generated />
using System;
using Infra_Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra_Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231202011420_InitialTable")]
    partial class InitialTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryImage = "https://images.unsplash.com/photo-1569040029205-a03a8b455808?q=80&w=1546&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            CategoryName = "Smartphones"
                        },
                        new
                        {
                            Id = 2,
                            CategoryImage = "https://images.unsplash.com/photo-1537832816519-689ad163238b?q=80&w=1718&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            CategoryName = "Fashion"
                        },
                        new
                        {
                            Id = 3,
                            CategoryImage = "https://images.unsplash.com/photo-1509198397868-475647b2a1e5?q=80&w=1547&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            CategoryName = "Games"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Reviews.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProductReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductReviewId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "The quality of the photos is incredible.",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_637616-MLA70484274053_072023-O.webp",
                            ProductReviewId = 1,
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 12, 1, 22, 14, 17, 141, DateTimeKind.Local).AddTicks(2222)
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Very good purchase, it arrived very quickly and it arrived like a totally new phone, it only has very slight details on the sides.",
                            Image = "https://m.media-amazon.com/images/I/71a4vqXqxbL._SY256.jpg",
                            ProductReviewId = 1,
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 12, 1, 22, 14, 17, 141, DateTimeKind.Local).AddTicks(2236)
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Good!",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_2X_743184-MLA69501979268_052023-F.webp",
                            ProductReviewId = 1,
                            Rating = 4,
                            ReviewDate = new DateTime(2023, 12, 1, 22, 14, 17, 141, DateTimeKind.Local).AddTicks(2237)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Products.Fashion.Shoes.Shoes", b =>
                {
                    b.HasBaseType("Domain.Entities.Product");

                    b.HasDiscriminator().HasValue("Shoes");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Buoyed to the comfort you've come to trust, the Air Max Excee meets the needs of your 9 to 5 while keeping your outfit on-point with rich textures. These sneakers deliver just what you're looking for—soft cushioning that's easy to style.\r\n\r\n",
                            Name = "Nike Air Max Excee",
                            Stock = 15
                        });
                });

            modelBuilder.Entity("Domain.Entities.Products.Fashion.Tshirts.Tshirt", b =>
                {
                    b.HasBaseType("Domain.Entities.Product");

                    b.HasDiscriminator().HasValue("Tshirt");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "The Nike Classic Swoosh Futura medium support women's workout top offers long-lasting comfort during training with sweat-wicking fabric and a compression fit.",
                            Name = "Top Nike Swoosh Woman",
                            Stock = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Products.Technology.Games.Game", b =>
                {
                    b.HasBaseType("Domain.Entities.Product");

                    b.HasDiscriminator().HasValue("Game");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Description = "With this Spider-Man game you will enjoy hours of fun and new challenges that will allow you to improve as a player.",
                            Name = "Marvel's Spider-Man: Miles Morales Standard Edition Sony PS5 Physical",
                            Stock = 10
                        });
                });

            modelBuilder.Entity("Domain.Entities.Products.Technology.Smartphones.Smartphone", b =>
                {
                    b.HasBaseType("Domain.Entities.Product");

                    b.HasDiscriminator().HasValue("Smartphone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Introducing Galaxy S23 Ultra - a smartphone that takes innovation to new heights. With its crystal-clear camera resolution and stunning Night Mode powered by Nightography, you can capture and share unforgettable moments, regardless of lighting conditions. Powered by the fastest Snapdragon processor, multitasking and intense gaming become seamless. Enjoy the convenience of a built-in S Pen, allowing you to write, sketch, edit, and share from anywhere. All of this on a large display designed for gaming, streaming, creating, and more. Elevate your everyday experience with a device that's truly extraordinary and share the epic with Galaxy S23 Ultra.",
                            Name = "Galaxy S23 Ultra 512GB Unlocked - Black",
                            Stock = 20
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Reviews.Review", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Products.Fashion.Shoes.Shoes", b =>
                {
                    b.OwnsOne("Domain.Entities.Products.Fashion.Shoes.ObjectsValue.ShoesDesignOV", "ShoesDesignObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("AdjustmentTypes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TypeOfPipe")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    AdjustmentTypes = "Shoelaces",
                                    TypeOfPipe = ""
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Fashion.Shoes.ObjectsValue.ShoesGeneralFeaturesOV", "ShoesGeneralFeaturesObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Age")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Gender")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    Age = "Adult",
                                    Color = "Black",
                                    Gender = "Woman",
                                    Version = "two"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Fashion.Shoes.ObjectsValue.ShoesMaterialsOV", "ShoesMaterialsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("InteriorMaterials")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MaterialsFromAbroad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SoleMaterials")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    InteriorMaterials = "",
                                    MaterialsFromAbroad = "",
                                    SoleMaterials = ""
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Fashion.Shoes.ObjectsValue.ShoesSpecificationsOV", "ShoesSpecificationsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("RecommendedSports")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Style")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    RecommendedSports = "skateboarding/casual",
                                    Size = "7.5",
                                    Style = "Urban"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductDataOV", "ProductDataObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ReleaseMonth")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.Property<string>("ReleaseYear")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    ReleaseMonth = "June",
                                    ReleaseYear = "2023"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductFlagsOV", "ProductFlagsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool>("IsBestSeller")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDailyOffer")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsFavorite")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    IsBestSeller = false,
                                    IsDailyOffer = false,
                                    IsFavorite = true
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductImageOV", "ProductImageObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ImageFirst")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("ImageSecond")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("ImageThird")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("MainImage")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    ImageFirst = "https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/f0f9838c-a13f-4a16-9d6a-045b8bcd4663/air-max-excee-womens-shoes-jKsgMj.png",
                                    ImageSecond = "https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/33f14890-9ba3-4ca0-90b6-f3a099620840/air-max-excee-womens-shoes-jKsgMj.png",
                                    ImageThird = "https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/14b801db-a5c6-417b-8fd3-2a630291e3d9/air-max-excee-womens-shoes-jKsgMj.png",
                                    MainImage = "https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/4ff2fe4a-4f74-4189-82f0-3ea780f9389d/air-max-excee-womens-shoes-jKsgMj.png"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductPriceOV", "ProductPriceObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<decimal>("HistoryPrice")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Price")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    HistoryPrice = 0.0m,
                                    Price = 95.99m
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductSpecificationsOV", "ProductSpecificationsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ProductBrand")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductLine")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductModel")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductType")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductWeight")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    ProductBrand = "Nike",
                                    ProductLine = "SB",
                                    ProductModel = "DM3493",
                                    ProductType = "Shoes",
                                    ProductWeight = "368,5 g"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductWarrantyOV", "ProductWarrantyObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("WarrantyInformation")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("WarrantyLength")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 2,
                                    WarrantyInformation = "45-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                });
                        });

                    b.Navigation("ProductDataObjectValue")
                        .IsRequired();

                    b.Navigation("ProductFlagsObjectValue")
                        .IsRequired();

                    b.Navigation("ProductImageObjectValue")
                        .IsRequired();

                    b.Navigation("ProductPriceObjectValue")
                        .IsRequired();

                    b.Navigation("ProductSpecificationsObjectValue")
                        .IsRequired();

                    b.Navigation("ProductWarrantyObjectValue")
                        .IsRequired();

                    b.Navigation("ShoesDesignObjectValue")
                        .IsRequired();

                    b.Navigation("ShoesGeneralFeaturesObjectValue")
                        .IsRequired();

                    b.Navigation("ShoesMaterialsObjectValue")
                        .IsRequired();

                    b.Navigation("ShoesSpecificationsObjectValue")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Products.Fashion.Tshirts.Tshirt", b =>
                {
                    b.OwnsOne("Domain.Entities.Products.Fashion.Tshirts.ObjectsValue.TshirtMainFeaturesOV", "TshirtMainFeaturesObectsValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Age")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FabricDesign")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Gender")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TypeOfClothing")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 3,
                                    Age = "Adult",
                                    FabricDesign = "Straight",
                                    Gender = "Woman",
                                    Size = "S",
                                    TypeOfClothing = "T-shirt"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Fashion.Tshirts.ObjectsValue.TshirtOtherFeaturesOV", "TshirtOtherFeaturesObectsValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Composition")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("ItsSporty")
                                .HasColumnType("bit");

                            b1.Property<string>("KindOfFabric")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MainMaterial")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RecommendedUses")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SleeveType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TypeOfCollar")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("UnitsPerKit")
                                .HasColumnType("int");

                            b1.Property<bool>("WithRecycledMaterials")
                                .HasColumnType("bit");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 3,
                                    Composition = "Polyester",
                                    ItsSporty = false,
                                    KindOfFabric = "Dry",
                                    MainMaterial = "Polyester",
                                    RecommendedUses = "Casual",
                                    SleeveType = "Like",
                                    TypeOfCollar = "Round neck",
                                    UnitsPerKit = 1,
                                    WithRecycledMaterials = false
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductDataOV", "ProductDataObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ReleaseMonth")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.Property<string>("ReleaseYear")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 3,
                                    ReleaseMonth = "June",
                                    ReleaseYear = "2023"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductFlagsOV", "ProductFlagsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool>("IsBestSeller")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDailyOffer")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsFavorite")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 3,
                                    IsBestSeller = true,
                                    IsDailyOffer = false,
                                    IsFavorite = true
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductImageOV", "ProductImageObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ImageFirst")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("ImageSecond")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("ImageThird")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("MainImage")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 3,
                                    ImageFirst = "https://imgnike-a.akamaihd.net/768x768/002897IDA1.jpg",
                                    ImageSecond = "https://imgnike-a.akamaihd.net/768x768/002897IDA4.jpg",
                                    ImageThird = "https://imgnike-a.akamaihd.net/768x768/002897IDA5.jpg",
                                    MainImage = "https://imgnike-a.akamaihd.net/768x768/002897ID.jpg"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductPriceOV", "ProductPriceObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<decimal>("HistoryPrice")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Price")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 3,
                                    HistoryPrice = 0.0m,
                                    Price = 16.99m
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductSpecificationsOV", "ProductSpecificationsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ProductBrand")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductLine")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductModel")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductType")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductWeight")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 3,
                                    ProductBrand = "Nike",
                                    ProductLine = "",
                                    ProductModel = "T-Shirt",
                                    ProductType = "T-Shirt",
                                    ProductWeight = "200 g"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductWarrantyOV", "ProductWarrantyObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("WarrantyInformation")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("WarrantyLength")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 3,
                                    WarrantyInformation = "15-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                });
                        });

                    b.Navigation("ProductDataObjectValue")
                        .IsRequired();

                    b.Navigation("ProductFlagsObjectValue")
                        .IsRequired();

                    b.Navigation("ProductImageObjectValue")
                        .IsRequired();

                    b.Navigation("ProductPriceObjectValue")
                        .IsRequired();

                    b.Navigation("ProductSpecificationsObjectValue")
                        .IsRequired();

                    b.Navigation("ProductWarrantyObjectValue")
                        .IsRequired();

                    b.Navigation("TshirtMainFeaturesObectsValue")
                        .IsRequired();

                    b.Navigation("TshirtOtherFeaturesObectsValue")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Products.Technology.Games.Game", b =>
                {
                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductDataOV", "ProductDataObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ReleaseMonth")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.Property<string>("ReleaseYear")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 4,
                                    ReleaseMonth = "June",
                                    ReleaseYear = "2023"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductFlagsOV", "ProductFlagsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool>("IsBestSeller")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDailyOffer")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsFavorite")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 4,
                                    IsBestSeller = true,
                                    IsDailyOffer = false,
                                    IsFavorite = false
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductImageOV", "ProductImageObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ImageFirst")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("ImageSecond")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("ImageThird")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("MainImage")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 4,
                                    ImageFirst = "https://http2.mlstatic.com/D_NQ_NP_717296-MLA44963321732_022021-O.webp",
                                    ImageSecond = "https://http2.mlstatic.com/D_NQ_NP_902181-MLA44963396568_022021-O.webp",
                                    ImageThird = "https://http2.mlstatic.com/D_NQ_NP_952087-MLU69953465194_062023-O.webp",
                                    MainImage = "https://http2.mlstatic.com/D_NQ_NP_739971-MLA44963396567_022021-O.webp"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductPriceOV", "ProductPriceObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<decimal>("HistoryPrice")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Price")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 4,
                                    HistoryPrice = 0.0m,
                                    Price = 30.99m
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductSpecificationsOV", "ProductSpecificationsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ProductBrand")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductLine")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductModel")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductType")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductWeight")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 4,
                                    ProductBrand = "Sony",
                                    ProductLine = "PS5",
                                    ProductModel = "Sony",
                                    ProductType = "Video game",
                                    ProductWeight = "100 g"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductWarrantyOV", "ProductWarrantyObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("WarrantyInformation")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("WarrantyLength")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 4,
                                    WarrantyInformation = "30-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Games.ObjectsValue.GameGeneralFeaturesOV", "GameGeneralFeaturesObjectsValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Collection")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Developers")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Edition")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GameRating")
                                .IsRequired()
                                .HasColumnType("nvarchar(1)");

                            b1.Property<string>("GameTitle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Genres")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Platform")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Publishers")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Saga")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 4,
                                    Collection = "Spider man",
                                    Developers = "Insomniac Games",
                                    Edition = "Standard Edition",
                                    GameRating = "T",
                                    GameTitle = "Marvel's Spider-Man: Miles Morales",
                                    Genres = "Action",
                                    Platform = "PS5",
                                    Publishers = "Sony",
                                    Saga = "30-Day Limited Warranty"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Games.ObjectsValue.GameRequirementsOV", "GameRequirementsObjectsValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("MinimumGraphicsProcessorsRequired")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MinimumOperatingSystemsRequired")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MinimumProcessorsRequired")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("MinimumRAMRequirement")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 4,
                                    MinimumGraphicsProcessorsRequired = "V",
                                    MinimumOperatingSystemsRequired = "PS5",
                                    MinimumProcessorsRequired = "Ps5",
                                    MinimumRAMRequirement = 60
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Games.ObjectsValue.GameSpecificationsOV", "GameSpecificationsObjectsValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("AudioLanguages")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("FileSize")
                                .HasColumnType("int");

                            b1.Property<string>("Format")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("ItsMultiplayer")
                                .HasColumnType("bit");

                            b1.Property<bool>("ItsOffline")
                                .HasColumnType("bit");

                            b1.Property<bool>("ItsOnline")
                                .HasColumnType("bit");

                            b1.Property<int>("MaximumNumberOfOfflinePlayers")
                                .HasColumnType("int");

                            b1.Property<int>("MaximumNumberOfOnlinePlayers")
                                .HasColumnType("int");

                            b1.Property<bool>("RequiresPeripheral")
                                .HasColumnType("bit");

                            b1.Property<string>("ScreenLanguages")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SubtitleLanguages")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 4,
                                    AudioLanguages = "English",
                                    FileSize = 60,
                                    Format = "Physical",
                                    ItsMultiplayer = false,
                                    ItsOffline = true,
                                    ItsOnline = false,
                                    MaximumNumberOfOfflinePlayers = 1,
                                    MaximumNumberOfOnlinePlayers = 1,
                                    RequiresPeripheral = false,
                                    ScreenLanguages = "English, Portuguese",
                                    SubtitleLanguages = "English, Portuguese"
                                });
                        });

                    b.Navigation("GameGeneralFeaturesObjectsValue")
                        .IsRequired();

                    b.Navigation("GameRequirementsObjectsValue")
                        .IsRequired();

                    b.Navigation("GameSpecificationsObjectsValue")
                        .IsRequired();

                    b.Navigation("ProductDataObjectValue")
                        .IsRequired();

                    b.Navigation("ProductFlagsObjectValue")
                        .IsRequired();

                    b.Navigation("ProductImageObjectValue")
                        .IsRequired();

                    b.Navigation("ProductPriceObjectValue")
                        .IsRequired();

                    b.Navigation("ProductSpecificationsObjectValue")
                        .IsRequired();

                    b.Navigation("ProductWarrantyObjectValue")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Products.Technology.Smartphones.Smartphone", b =>
                {
                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectsValue.SmartphoneBatteryOV", "SmartphoneBatteryObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("BatteryCapacitymAh")
                                .HasColumnType("int");

                            b1.Property<string>("BatteryType")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<bool>("IsBatteryRemovable")
                                .HasColumnType("bit");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    BatteryCapacitymAh = 5000,
                                    BatteryType = "Li-Ion",
                                    IsBatteryRemovable = false
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectsValue.SmartphoneCameraOV", "SmartphoneCameraObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("MainCameraFeature")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("MainCameraSpec")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("SelfieCameraFeature")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("SelfieCameraSpec")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    MainCameraFeature = "(Quad) 200 MP + 10 MP + 10 MP + 12 MP",
                                    MainCameraSpec = "200 MPx",
                                    SelfieCameraFeature = "LED flash, auto-HDR, panorama",
                                    SelfieCameraSpec = "12 MP"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectsValue.SmartphoneDimensionsOV", "SmartphoneDimensionsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<double>("HeightInche")
                                .HasColumnType("float");

                            b1.Property<double>("ThicknessInche")
                                .HasColumnType("float");

                            b1.Property<double>("WidthInche")
                                .HasColumnType("float");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    HeightInche = 6.4299999999999997,
                                    ThicknessInche = 0.34999999999999998,
                                    WidthInche = 3.0699999999999998
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectsValue.SmartphoneDisplayOV", "SmartphoneDisplayObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("DisplayProtection")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)");

                            b1.Property<string>("DisplayResolution")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<double>("DisplaySizeInche")
                                .HasColumnType("float");

                            b1.Property<string>("DisplayType")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    DisplayProtection = "Corning Gorilla Glass Victus 2",
                                    DisplayResolution = "1440 x 3088 pixels",
                                    DisplaySizeInche = 6.7999999999999998,
                                    DisplayType = "Dynamic AMOLED 2X"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectsValue.SmartphoneFeatureOV", "SmartphoneFeatureObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("CellNetworkTechnology")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ManufacturerPartNumber")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("VirtualAssistant")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    CellNetworkTechnology = "WCDMA (UMTS) / GSM / 5G",
                                    Color = "Phantom Black",
                                    ManufacturerPartNumber = "SM-S918UZKFXAA",
                                    VirtualAssistant = "Samsung Bixby,Alexa,Google Assistant"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectsValue.SmartphoneMemoryOV", "SmartphoneMemoryObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("RAMGB")
                                .HasColumnType("int");

                            b1.Property<int>("StorageGB")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    RAMGB = 16,
                                    StorageGB = 512
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectsValue.SmartphonePlatformOV", "SmartphonePlatformObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("CPU")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("Chipset")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("GPU")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("OperatingSystem")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    CPU = "Octa-core",
                                    Chipset = "Qualcomm SM8550-AC Snapdragon 8 Gen 2",
                                    GPU = "Adreno 740",
                                    OperatingSystem = "Android"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductDataOV", "ProductDataObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ReleaseMonth")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.Property<string>("ReleaseYear")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    ReleaseMonth = "June",
                                    ReleaseYear = "2023"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductFlagsOV", "ProductFlagsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool>("IsBestSeller")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDailyOffer")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsFavorite")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    IsBestSeller = false,
                                    IsDailyOffer = true,
                                    IsFavorite = true
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductImageOV", "ProductImageObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ImageFirst")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("ImageSecond")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("ImageThird")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("MainImage")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    ImageFirst = "https://http2.mlstatic.com/D_NQ_NP_945544-MLU70401529414_072023-O.webp",
                                    ImageSecond = "https://http2.mlstatic.com/D_NQ_NP_808604-MLU70400221716_072023-O.webp",
                                    ImageThird = "https://http2.mlstatic.com/D_NQ_NP_827555-MLU70400783806_072023-O.webp",
                                    MainImage = "https://http2.mlstatic.com/D_NQ_NP_856672-MLU70401529412_072023-O.webp"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductPriceOV", "ProductPriceObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<decimal>("HistoryPrice")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Price")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    HistoryPrice = 6199.99m,
                                    Price = 4479.99m
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductSpecificationsOV", "ProductSpecificationsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ProductBrand")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductLine")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductModel")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("ProductType")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProductWeight")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    ProductBrand = "Samsung",
                                    ProductLine = "Galaxy S",
                                    ProductModel = "S23 Ultra",
                                    ProductType = "Smartphone",
                                    ProductWeight = "233 g"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductsOV.ProductWarrantyOV", "ProductWarrantyObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("WarrantyInformation")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("WarrantyLength")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    WarrantyInformation = "30-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                });
                        });

                    b.Navigation("ProductDataObjectValue")
                        .IsRequired();

                    b.Navigation("ProductFlagsObjectValue")
                        .IsRequired();

                    b.Navigation("ProductImageObjectValue")
                        .IsRequired();

                    b.Navigation("ProductPriceObjectValue")
                        .IsRequired();

                    b.Navigation("ProductSpecificationsObjectValue")
                        .IsRequired();

                    b.Navigation("ProductWarrantyObjectValue")
                        .IsRequired();

                    b.Navigation("SmartphoneBatteryObjectValue")
                        .IsRequired();

                    b.Navigation("SmartphoneCameraObjectValue")
                        .IsRequired();

                    b.Navigation("SmartphoneDimensionsObjectValue")
                        .IsRequired();

                    b.Navigation("SmartphoneDisplayObjectValue")
                        .IsRequired();

                    b.Navigation("SmartphoneFeatureObjectValue")
                        .IsRequired();

                    b.Navigation("SmartphoneMemoryObjectValue")
                        .IsRequired();

                    b.Navigation("SmartphonePlatformObjectValue")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
